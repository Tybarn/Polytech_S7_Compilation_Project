/*
	CO = Classe et Object concernes
	L ou Liste = Liste, se répète
	Opt = Optionnel
	Param = Parametre
	Arg = Argument
	Champ = Champ d'une classe ou un objet
	Constr = Constructeur
	Decl = Declaration
*/

/* -------------------------- AXIOME -------------------------- */

S : LDeclCOOpt Bloc
;

/* -------------------------- PARTIE DECLARATION -------------------------- */

LDeclCOOpt :  DeclClasse LDeclCOOpt
	| DeclObject LDeclCOOpt
	| 
;

/* -------------------------- DECLARATION CLASSE -------------------------- */

DeclClasse : class IDCLASS '(' LParamClasseOpt ')' extends TypeCO is BlocDeclClasse
    | class IDCLASS '(' LParamClasseOpt ')' is BlocDeclClasse//TODO
;

LParamClasseOpt : LParamClasse
	   | 
;

LParamClasse : ParamClasse ',' LParamClasse
	  | ParamClasse
;

ParamClasse : var IDVAR ':' TypeCO
        | Param
;

BlocDeclClasse : '{' LDeclChampOpt DefConstructClasse LDefMethodeOpt '}'
;

LDeclChampOpt : LDeclChamp
    |
;

LDeclChamp :  DeclChamp LDeclChamp
	| DeclChamp
;

DeclChamp : var IDVAR ':' TypeCO ';'
;

DefConstructClasse : def IDCLASS '(' LParamClasseOpt ')' is Bloc
    | def IDCLASS '(' LParamClasseOpt ')' ':' IDCLASS '(' ListeArgOpt ')' is Bloc
;

LDefMethodeOpt : LDefMethode
	|
;

LDefMethode : DefMethode LDefMethode
	| DefMethode
;

DefMethode : override def IDVAR '(' LParamOpt ')' ':' IDCLASS AFFECT Expression
	| def IDVAR '(' LParamOpt ')' ':' IDCLASS AFFECT Expression
	| override def IDVAR '(' LParamOpt ')' NomClasseOpt is Bloc
	| def IDVAR '(' LParamOpt ')' NomClasseOpt is Bloc
;

NomClasseOpt:IDCLASS
	|
;

LParamOpt : LParam
	|
;

LParam : Param ',' LParam
		| Param
;

Param : IDVAR ':' TypeCO
;

/* -------------------------- DECLARATION OBJECT -------------------------- */

DeclObject : object IDCLASS is BlocDeclObject
;

BlocDeclObject : '{' LDeclChampOpt DefConstructObject LDefMethodeOpt '}'
;

DefConstructObject : def IDCLASS is Bloc
;

/* -------------------------- AUTRE --------------------------- */

TypeCO : Integer
	| String
	| IDCLASS
;

/* ------------------------- BLOC --------------------------- */ 

Bloc: '{' ContenueBloc '}'
;

ContenueBloc : ListeDecl is ListeInstr 
	| ListeInstrOpt
;

/* ------------------------ INSTRUCTIONS -------------------------- */

ListeInstrOpt : ListeInstr
	|
;

ListeInstr: Instr ListeInstr
	| Instr
;

Instr : Expression ';'
    |   Bloc
    |   return ';'
    |   IDVAR AFFECT Expression';'
    |   if Expression then '{' Instr '}' else '{' Instr '}'
;

/* ------------------------ DECLARATION DANS BLOC ------------------------- */

ListeDecl : Decl ListDeclOpt
;

Decl : IDVAR ':' IDCLASS InitOpt ';'
;

InitOpt : AFFECT Expression
	|
;

ListDeclOpt : ListeDecl 
    |   
;

/* ------------------------ EXPRESSION ------------------------ */

Expression : E0 RELOP E0
	| E0

E0 : E0 '&' E1
	| E0 ADD E1
	| E0 SUB E1
	| E1
;

E1 : E1 MUL E2
	| E1 DIV E2
	| E2
;

E2 : ADD E3
	| SUB E3
	| E3
;

E3 : CST
	| IDVAR
	| ( Expression )
	| Identificateur
	| Selection
	| Cast
	| Instanciation
	| Message

Identificateur : this
	| super
	| result

Selection : E3 '.' IDVAR

Cast : '(' IDCLASS Expression ')'

Instanciation : new IDCLASS '(' ListeArgOpt ')'

ListeArgOpt : ListeArg
    |
;

ListeArg : Arg ',' ListeArg
    |   Arg
;

Arg : Expression
;

Message : Selection '(' ListeArgOpt ')'